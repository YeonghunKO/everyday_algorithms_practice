/** 
 * 
처음 위치 0 에서 5 칸을 앞으로 점프하면 바로 도착하지만, 건전지 사용량이 5 만큼 듭니다.

처음 위치 0 에서 2 칸을 앞으로 점프한 다음 순간이동 하면 (현재까지 온 거리 : 2) x 2에 해당하는 위치로 이동할 수 있으므로 위치 4로 이동합니다. 
이때 1 칸을 앞으로 점프하면 도착하므로 건전지 사용량이 3 만큼 듭니다.

처음 위치 0 에서 1 칸을 앞으로 점프한 다음 순간이동 하면 (현재까지 온 거리 : 1) x 2에 해당하는 위치로 이동할 수 있으므로 위치 2로 이동됩니다. 
이때 다시 순간이동 하면 (현재까지 온 거리 : 2) x 2 만큼 이동할 수 있으므로 위치 4로 이동합니다. 
이때 1 칸을 앞으로 점프하면 도착하므로 건전지 사용량이 2 만큼 듭니다. 
 *
 */

function solution(n) {
  let ans = 0;

  // n이 0이 아닐 경우 계속 진행
  // n이 0에 수렴할때까지 빼거나 2로 나눔
  while (n !== 0) {
    // 홀수일때
    if (n % 2 === 1) {
      ans++;
      n = n - 1;
      // 짝수일때
    } else {
      n = n / 2;
    }
  }

  return ans;
}

/**
 * 결국 2로 몇번을 나눌 수 있느냐를 구하면 됨
 * 2로 나누면 일단 한번 가는 거니깐
 */
function solution2(n) {
  if (n === 1) return 1;
  const nArr = Array.from(n.toString(2));
  return nArr.reduce((a, b) => +a + +b); // ==> 이진수로 바꾸고나서 0 다 지우고 1의 갯수만 lenth로 구해도 됨
}

solution2(6);
